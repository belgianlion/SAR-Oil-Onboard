from PIL import Image
from torch.utils.data import Dataset
import os

# This dataset ingester was made with help from GitHub Copilot. The core
# structure was generated by it, and I modified based on troubleshooting,
# desired printouts, and generalized restructuring 
class SARImageDataset(Dataset):
    def __init__(self, img_dir, transform=None):
        self.img_dir = img_dir
        self.transform = transform
        self.img_labels = []
        # Training images should be within a folder labeled (1 or 0) corresponding to their
        # respective classification.
        for label in os.listdir(img_dir):
            label_dir = os.path.join(img_dir, label)
            if os.path.isdir(label_dir):
                # count chips to give a good readout of number of items per
                # each class
                chip_counts = 0
                for img_file in os.listdir(label_dir):
                    chip_counts+=1
                    # Tuple of file directories and their labels.
                    self.img_labels.append((os.path.join(label_dir, img_file), int(label)))
                print(f"Found {chip_counts} images of class {label}")
            else:
                raise IsADirectoryError(f"The directory {label} is not an acceptable directory. Please resolve.")
        print(f"Found {len(self.img_labels)} images in {img_dir}")

    def __len__(self):
        return len(self.img_labels)

    def __getitem__(self, idx):
        # Extract each path and its label from the list created during init.
        img_path, label = self.img_labels[idx]
        # Ensure image is in RGB colorspace (utilized by ResNet)
        image = Image.open(img_path).convert("RGB")
        if self.transform:
            # If a transform was provided, perform it.
            # Transforms will most likely always be provided to ensure that the ingested
            # images all follow the same format.
            image = self.transform(image)
        return image, label